apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'java'
apply from: 'gradle/integration-test.gradle'
apply plugin: 'com.github.ben-manes.versions'

findbugs.toolVersion = '3.0.0'

repositories {
    mavenCentral()
}

configurations {
    // exclude commons-logging, log4j, and j.u.logging - we use slf4j and logback
    all*.exclude group: 'commons-logging'
    all*.exclude group: 'log4j'
    all*.exclude group: 'jboss', module: 'javassist'
}

dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    providedCompile 'javax.servlet:jsp-api:2.0'
    compile 'org.springframework:spring-webmvc:4.1.6.RELEASE'
    compile 'org.springframework:spring-context:4.1.6.RELEASE'
    compile 'org.springframework:spring-orm:4.1.6.RELEASE'
    compile 'org.springframework.data:spring-data-jpa:1.7.2.RELEASE'
    compile 'org.springframework.security:spring-security-web:4.0.1.RELEASE'
    compile 'org.springframework.security:spring-security-config:4.0.1.RELEASE'
    compile 'org.springframework.security:spring-security-taglibs:4.0.1.RELEASE'

    compile 'org.hibernate:hibernate-validator:5.1.3.Final'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
    compile 'org.hibernate:hibernate-core:4.3.9.Final'
    compile 'org.hibernate:hibernate-entitymanager:4.3.9.Final'

    // fix problems with hibernate
    compile 'org.javassist:javassist:3.19.0-GA'

    compile 'org.apache.tiles:tiles-extras:3.0.4'
    compile 'org.apache.derby:derby:10.11.1.1'
    compile 'org.apache.pdfbox:pdfbox:1.8.6'
    compile 'org.bouncycastle:bcprov-jdk16:1.46'
    compile 'org.bouncycastle:bcmail-jdk16:1.46'
    compile 'org.slf4j:slf4j-api:1.7.2'
    compile 'ch.qos.logback:logback-classic:1.0.9'
    compile 'org.slf4j:jcl-over-slf4j:1.7.2'
    compile 'org.slf4j:log4j-over-slf4j:1.7.2'
    compile 'commons-fileupload:commons-fileupload:1.3.1'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile 'javax.mail:javax.mail-api:1.5.2'
    compile 'jstl:jstl:1.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.2'
    compile 'com.fasterxml.jackson.core:jackson-core:2.5.2'
	compile 'com.fasterxml.jackson.core:jackson-annotations:2.5.2'
    compile 'mysql:mysql-connector-java:5.1.32'
    compile 'findbugs:annotations:1.0.0'
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'com.google.guava:guava:18.0'
    compile 'com.sun.mail:javax.mail:1.5.2'

    testCompile 'org.springframework:spring-test:4.1.6.RELEASE'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:1.7.2'
    testCompile 'org.mockito:mockito-all:1.9.5'
}

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.5-beta-6'
    }
}

sourceCompatibility = 1.8

eclipse {
    classpath {
        file {
            // Classpath entry for Eclipse which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
            withXml { xml ->
                def node = xml.asNode()
                node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
                node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
            }
        }
    }
    jdt {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    wtp {
        facet {
            facet name: 'java', version: '1.8'
            facet name: 'jst.web', version: '3.0'
        }
    }
}

/* Changes the source encoding to UTF-8 */
eclipseJdt << {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=UTF-8')
}

/* Specifies the stop port for the jetty plugin */
stopPort = 8080
stopKey = ''

/* Configures the PMD-Plugin globally. */
pmd {
    toolVersion  = '5.1.3'
}

/* Configures the Checkstyle-Plugin globally. */
checkstyle {
    toolVersion = '6.1'
}

/* Configures the PMD-Plugin for main and test */
tasks.withType(Pmd) {
    ruleSets = []
    ruleSetFiles = files('config/pmd/rules-hafner.xml')
    ignoreFailures = true
    reports {
        xml.enabled true
        html.enabled false
    }
}

tasks.withType(Checkstyle) {
    ignoreFailures = true
    config
    configProperties = ['config_loc':"${projectDir}/config/checkstyle"]
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled true
        html.enabled false
    }
    ignoreFailures = true
    excludeFilter = file('config/findbugs/findbugs-exclusion-filter.xml')
}

// See http://www.practicalgradle.org/blog/2011/06/incremental-tests-with-jenkins/
task supressNoTestsRun {
    inputs.files test.outputs.files
    doLast{
        def timestamp = System.currentTimeMillis()
        testResultsDir.eachFile { it.lastModified = timestamp }
    }
}

build.dependsOn(supressNoTestsRun)

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
